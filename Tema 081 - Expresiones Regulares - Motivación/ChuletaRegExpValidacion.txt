FUNCIONES PARA VALIDAR COSAS CON EL REGEXP (Óscar maricón)


----------------------------------------------------------------------------

1.- VALIDAR UN NÚMERO ENTERO

/**
 * Valida si una cadena es un numero entero
 * @param texto String que contiene el valor a validar
 * @return True = es un numero entero
 */
public static boolean validaNumeroEntero_Exp(String texto){
     
    return texto.matches("^-?[0-9]+$");
}

----------------------------------------------------------------------------

2.- VALIDAR UN ENTERO POSITIVO

/**
 * Valida si una cadena es un numero entero positivo
 * @param texto String que contiene el valor a validar
 * @return True = es un numero entero positivo
 */
public static boolean validaNumeroEnteroPositivo_Exp(String texto){
     
    return texto.matches("^[0-9]+$");
}

----------------------------------------------------------------------------

3.- VALIDAR ENTERO NEGATIVO

/**
 * Valida si una cadena es un numero entero negativo
 * @param texto String que contiene el valor a validar
 * @return True = es un numero entero negativo
 */
public static boolean validaNumeroEnteroNegativo_Exp(String texto){
     
    return texto.matches("^-[0-9]+$");
}

----------------------------------------------------------------------------

4.- VALIDAR DNI (8 números y las letras correctas)

/**
 * Valida si una cadena es un DNI: 8 numeros y una letra al final
 * @param DNI String que contiene el valor a validar
 * @return True = es un DNI válido
 */
public static boolean validaDNI_Exp(String DNI){
     
    return DNI.matches("^[0-9]{8}[T|R|W|A|G|M|Y|F|P|D|X|B|N|J|Z|S|Q|V|H|L|C|K|E]$");
     
}

----------------------------------------------------------------------------

5.- VALIDAR UNA IP

/**
 * Valida si una cadena es una IP válida
 * @param ip String que contiene el valor a validar
 * @return True = es una IP válida
 */
public static boolean validaIP_Exp(String ip){
     
    return ip.matches("^(([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$");
}

----------------------------------------------------------------------------

6.- VALIDAR UNA MATRÍCULA DE COCHE

/**
 * Valida si una cadena es una matricula europea (<2000)
 *
 * @param matricula String que contiene el valor a validar
 * @return True = es una matricula europea (<2000)
 */
public static boolean validarMatriculaEuropea_Exp(String matricula) {
 
    return matricula.matches("^[0-9]{4}[A-Z]{3}$");
 
}

----------------------------------------------------------------------------

7) Validar un número binario.

/**
 * Valida si una cadena es un número binario
 * @param binario String que contiene el valor a validar
 * @return True = es un número binario válido
 */
public static boolean validaBinario_Exp(String binario){
     
    return binario.matches("^[0-1]+$");
     
}

----------------------------------------------------------------------------

8) Validar un número octal.

/**
 * Valida si una cadena es un número octal
 * @param octal String que contiene el valor a validar
 * @return True = es un número octal válido
 */
public static boolean validaOctal_Exp(String octal){
     
    return octal.matches("^[0-7]+$");
     
}

----------------------------------------------------------------------------

9) Validar un número hexadecimal.

/**
 * Valida si una cadena es un número hexadecimal
 * @param hexadecimal String que contiene el valor a validar
 * @return True = es un número hexadecimal válido
 */
public static boolean validaHexadecimal_Exp(String hexadecimal){
     
    return hexadecimal.matches("^[0-9A-F]+$");
     
}

----------------------------------------------------------------------------

10) Validar numero real.

/**
 * Valida si una cadena es un numero real (positivo o negativo)
 * @param texto String que contiene el valor a validar
 * @return True = es un numero real
 */
public static boolean validaNumeroReal_Exp(String texto){
     
    return texto.matches("^-?[0-9]+([\\.,][0-9]+)?$");
}

----------------------------------------------------------------------------

11) Validar numero real positivo.

/**
 * Valida si una cadena es un numero real positivo
 * @param texto String que contiene el valor a validar
 * @return True = es un numero real positivo
 */
public static boolean validaNumeroRealPositivo_Exp(String texto) {
 
    return texto.matches("^[0-9]+([\\.,][0-9]+)?$");
}

----------------------------------------------------------------------------

12) Validar numero real negativo.

/**
 * Valida si una cadena es un numero real negativo
 * @param texto String que contiene el valor a validar
 * @return True = es un numero real negativo
 */
public static boolean validaNumeroRealNegativo_Exp(String texto){
     
    return texto.matches("^-[0-9]+([\\.,][0-9]+)$");
}

----------------------------------------------------------------------------

13) Validar numero real con x decimales.

/**
 * Valida si una cadena es un numero real (positivo o negativo) con un
 * numero de decimales
 * @param texto String que contiene el valor a validar
 * @param num_deciamales numero de decimales maximo, no puede ser menor que
 * cero
 * @return True = es un numero real
 */
public static boolean validaNumeroReal_Exp(String texto, int num_deciamales) {
    if (num_deciamales > 0) {
        return texto.matches("^-?[0-9]+([\\.,][0-9]{1," + num_deciamales + "})?$");
    } else {
        return false;
    }
 
}

----------------------------------------------------------------------------

14) Validar numero real positivo con x decimales.

/**
 * Valida si una cadena es un numero real (positivo o negativo) con un
 * numero de decimales
 *
 * @param texto String que contiene el valor a validar
 * @param num_deciamales numero de decimales maximo, no puede ser menor que
 * cero
 * @return True = es un numero real
 */
public static boolean validaNumeroRealPositivo_Exp(String texto, int num_deciamales) {
    if (num_deciamales > 0) {
        return texto.matches("^[0-9]+([\\.,][0-9]{1," + num_deciamales + "})?$");
    } else {
        return false;
    }
 
}

----------------------------------------------------------------------------

15) Validar numero real negativo con x decimales.

/**
 * Valida si una cadena es un numero real (positivo o negativo) con un
 * numero de decimales
 *
 * @param texto String que contiene el valor a validar
 * @param num_deciamales numero de decimales maximo, no puede ser menor que
 * cero
 * @return True = es un numero real
 */
public static boolean validaNumeroRealNegativo_Exp(String texto, int num_deciamales) {
    if (num_deciamales > 0) {
        return texto.matches("^-[0-9]+([\\.,][0-9]{1," + num_deciamales + "})?$");
    } else {
        return false;
    }
 
}

----------------------------------------------------------------------------

16) Validar una fecha con formato dd/mm/aaaa

/**
 * Valida si una cadena tiene el formato de fecha dd/mm/aaaa
 *
 * @param texto String que contiene el valor a validar
 * @return True = es una fecha válida
 */
public static boolean validaNumeroFecha_Exp(String texto) {
 
    return texto.matches("^(0?[1-9]|[12][0-9]|3[01])[\\/](0?[1-9]|1[012])[/\\/](19|20)\\d{2}$");
}

----------------------------------------------------------------------------

17) Validar un nombre, incluyendo nombres compuestos.

/**
 * Valida si una cadena tiene el formato de nombre de persona, incluyendo nombres compuestos
 *
 * @param texto String que contiene el valor a validar
 * @return True = es un nombre válido
 */
public static boolean validaNombre_Exp(String texto) {
 
    return texto.matches("^([A-Z]{1}[a-z]+[ ]?){1,2}$");
}

----------------------------------------------------------------------------

18) Validar un email.

/**
 * Valida si una cadena es un email
 *
 * @param email String que contiene el valor a validar
 * @return True = es un email válido
 */
public static boolean validar_Mail_Exp(String email) {
 
    return email.matches("^([\\w-]+\\.)*?[\\w-]+@[\\w-]+\\.([\\w-]+\\.)*?[\\w]+$");
 
}

----------------------------------------------------------------------------

19) Valida un nombre de usuario en twitter, empieza por @ y puede contener letras mayusculas y minusculas, numeros, guiones y guiones bajos.

/**
 * Valida si una cadena es un usuario de twitter
 *
 * @param usuario_twitter String que contiene el valor a validar
 * @return True = es un usuario de twitter
 */
public static boolean validarUsuarioTwitter_Exp(String usuario_twitter) {
 
    return usuario_twitter.matches("^@([A-Za-z0-9_]{1,15})$");
 
}

----------------------------------------------------------------------------

20) Validar ISBN de 13 digitos, siempre empieza en 978 o 979.

/**
 * Valida si una cadena es un ISBN de 13 digitos
 *
 * @param ISBN String que contiene el valor a validar
 * @return True = es un usuario de twitter
 */
public static boolean validarISBN13_Exp(String ISBN) {
 
    return ISBN.matches("^(978|979)[0-9]{9}$");
 
}


21)  VALIDAR PASS VARIADITO...

((?=.*[a-z])(?=.*[0-9])(?=.*[_@#$~%&])(?=.*[A-Z]).{8,16})